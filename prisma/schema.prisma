// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  avatar          String?
  name            String
  created         DateTime    @default(now())
  updated         DateTime    @updatedAt
  tokens          Token[]
  products        Product[]
  posts           Post[]
  answer          Answer[]
  wondering       Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  favorites       Favorite[]
  sales           Sale[]
  purchases       Purchase[]
  records         Record[] // [Enum] favorite, sale, purchase 
}

model Token {
  id      Int      @id @default(autoincrement())
  payload String   @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  created     DateTime   @default(now())
  updated     DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String     @db.MediumText
  name        String
  price       Int
  description String     @db.MediumText
  favorites   Favorite[]
  sales       Sale[]
  purchases   Purchase[]
  record      Record[]
}

model Post {
  id        Int         @id @default(autoincrement())
  created   DateTime    @default(now())
  updated   DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  answer    Answer[]
  wondering Wondering[]
}

model Answer {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  answer  String   @db.MediumText
}

model Wondering {
  id      Int      @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
}

model Review {
  id              Int      @id @default(autoincrement())
  created         DateTime @default(now())
  updated         DateTime @updatedAt
  review          String   @db.MediumText
  createBy        User     @relation(name: "writtenReviews", fields: [createByUserId], references: [id], onDelete: Cascade)
  createByUserId  Int
  createFor       User     @relation(name: "receivedReviews", fields: [createForUserId], references: [id], onDelete: Cascade)
  createForUserId Int
  score           Int      @default(1)
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created   DateTime @default(now())
  updated   DateTime @updatedAt
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  kind      Kind // [Enum] Favorite, Sale, Purchase
}

enum Kind {
  Sale
  Purchase
  Favorite
}
